<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : POGOProtos/Networking/Responses/GetGymDetailsResponse.proto
 */


namespace POGOProtos\Networking\Responses;

/**
 * Protobuf message : POGOProtos.Networking.Responses.GetGymDetailsResponse
 */
class GetGymDetailsResponse extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * gym_state optional message = 1
     *
     * @var \POGOProtos\Data\Gym\GymState
     */
    protected $gym_state = null;

    /**
     * name optional string = 2
     *
     * @var string
     */
    protected $name = null;

    /**
     * urls repeated string = 3
     *
     * @var \Protobuf\Collection
     */
    protected $urls = null;

    /**
     * result optional enum = 4
     *
     * @var \POGOProtos\Networking\Responses\GetGymDetailsResponse\Result
     */
    protected $result = null;

    /**
     * description optional string = 5
     *
     * @var string
     */
    protected $description = null;

    /**
     * secondary_url repeated string = 6
     *
     * @var \Protobuf\Collection
     */
    protected $secondary_url = null;

    /**
     * checkin_image_url optional string = 7
     *
     * @var string
     */
    protected $checkin_image_url = null;

    /**
     * event_info optional message = 8
     *
     * @var \POGOProtos\Data\Raid\EventInfo
     */
    protected $event_info = null;

    /**
     * Check if 'gym_state' has a value
     *
     * @return bool
     */
    public function hasGymState()
    {
        return $this->gym_state !== null;
    }

    /**
     * Get 'gym_state' value
     *
     * @return \POGOProtos\Data\Gym\GymState
     */
    public function getGymState()
    {
        return $this->gym_state;
    }

    /**
     * Set 'gym_state' value
     *
     * @param \POGOProtos\Data\Gym\GymState $value
     */
    public function setGymState(\POGOProtos\Data\Gym\GymState $value = null)
    {
        $this->gym_state = $value;
    }

    /**
     * Check if 'name' has a value
     *
     * @return bool
     */
    public function hasName()
    {
        return $this->name !== null;
    }

    /**
     * Get 'name' value
     *
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Set 'name' value
     *
     * @param string $value
     */
    public function setName($value = null)
    {
        $this->name = $value;
    }

    /**
     * Check if 'urls' has a value
     *
     * @return bool
     */
    public function hasUrlsList()
    {
        return $this->urls !== null;
    }

    /**
     * Get 'urls' value
     *
     * @return \Protobuf\Collection
     */
    public function getUrlsList()
    {
        return $this->urls;
    }

    /**
     * Set 'urls' value
     *
     * @param \Protobuf\Collection $value
     */
    public function setUrlsList(\Protobuf\Collection $value = null)
    {
        $this->urls = $value;
    }

    /**
     * Add a new element to 'urls'
     *
     * @param string $value
     */
    public function addUrls($value)
    {
        if ($this->urls === null) {
            $this->urls = new \Protobuf\ScalarCollection();
        }

        $this->urls->add($value);
    }

    /**
     * Check if 'result' has a value
     *
     * @return bool
     */
    public function hasResult()
    {
        return $this->result !== null;
    }

    /**
     * Get 'result' value
     *
     * @return \POGOProtos\Networking\Responses\GetGymDetailsResponse\Result
     */
    public function getResult()
    {
        return $this->result;
    }

    /**
     * Set 'result' value
     *
     * @param \POGOProtos\Networking\Responses\GetGymDetailsResponse\Result $value
     */
    public function setResult(\POGOProtos\Networking\Responses\GetGymDetailsResponse\Result $value = null)
    {
        $this->result = $value;
    }

    /**
     * Check if 'description' has a value
     *
     * @return bool
     */
    public function hasDescription()
    {
        return $this->description !== null;
    }

    /**
     * Get 'description' value
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->description;
    }

    /**
     * Set 'description' value
     *
     * @param string $value
     */
    public function setDescription($value = null)
    {
        $this->description = $value;
    }

    /**
     * Check if 'secondary_url' has a value
     *
     * @return bool
     */
    public function hasSecondaryUrlList()
    {
        return $this->secondary_url !== null;
    }

    /**
     * Get 'secondary_url' value
     *
     * @return \Protobuf\Collection
     */
    public function getSecondaryUrlList()
    {
        return $this->secondary_url;
    }

    /**
     * Set 'secondary_url' value
     *
     * @param \Protobuf\Collection $value
     */
    public function setSecondaryUrlList(\Protobuf\Collection $value = null)
    {
        $this->secondary_url = $value;
    }

    /**
     * Add a new element to 'secondary_url'
     *
     * @param string $value
     */
    public function addSecondaryUrl($value)
    {
        if ($this->secondary_url === null) {
            $this->secondary_url = new \Protobuf\ScalarCollection();
        }

        $this->secondary_url->add($value);
    }

    /**
     * Check if 'checkin_image_url' has a value
     *
     * @return bool
     */
    public function hasCheckinImageUrl()
    {
        return $this->checkin_image_url !== null;
    }

    /**
     * Get 'checkin_image_url' value
     *
     * @return string
     */
    public function getCheckinImageUrl()
    {
        return $this->checkin_image_url;
    }

    /**
     * Set 'checkin_image_url' value
     *
     * @param string $value
     */
    public function setCheckinImageUrl($value = null)
    {
        $this->checkin_image_url = $value;
    }

    /**
     * Check if 'event_info' has a value
     *
     * @return bool
     */
    public function hasEventInfo()
    {
        return $this->event_info !== null;
    }

    /**
     * Get 'event_info' value
     *
     * @return \POGOProtos\Data\Raid\EventInfo
     */
    public function getEventInfo()
    {
        return $this->event_info;
    }

    /**
     * Set 'event_info' value
     *
     * @param \POGOProtos\Data\Raid\EventInfo $value
     */
    public function setEventInfo(\POGOProtos\Data\Raid\EventInfo $value = null)
    {
        $this->event_info = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'gym_state' => null,
            'name' => null,
            'urls' => [],
            'result' => null,
            'description' => null,
            'secondary_url' => [],
            'checkin_image_url' => null,
            'event_info' => null
        ], $values);

        $message->setGymState($values['gym_state']);
        $message->setName($values['name']);
        $message->setResult($values['result']);
        $message->setDescription($values['description']);
        $message->setCheckinImageUrl($values['checkin_image_url']);
        $message->setEventInfo($values['event_info']);

        foreach ($values['urls'] as $item) {
            $message->addUrls($item);
        }

        foreach ($values['secondary_url'] as $item) {
            $message->addSecondaryUrl($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'GetGymDetailsResponse',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'gym_state',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.POGOProtos.Data.Gym.GymState'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'name',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'urls',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'result',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.POGOProtos.Networking.Responses.GetGymDetailsResponse.Result'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'description',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'secondary_url',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'checkin_image_url',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'event_info',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.POGOProtos.Data.Raid.EventInfo'
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->gym_state !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeVarint($stream, $this->gym_state->serializedSize($sizeContext));
            $this->gym_state->writeTo($context);
        }

        if ($this->name !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeString($stream, $this->name);
        }

        if ($this->urls !== null) {
            foreach ($this->urls as $val) {
                $writer->writeVarint($stream, 26);
                $writer->writeString($stream, $val);
            }
        }

        if ($this->result !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeVarint($stream, $this->result->value());
        }

        if ($this->description !== null) {
            $writer->writeVarint($stream, 42);
            $writer->writeString($stream, $this->description);
        }

        if ($this->secondary_url !== null) {
            foreach ($this->secondary_url as $val) {
                $writer->writeVarint($stream, 50);
                $writer->writeString($stream, $val);
            }
        }

        if ($this->checkin_image_url !== null) {
            $writer->writeVarint($stream, 58);
            $writer->writeString($stream, $this->checkin_image_url);
        }

        if ($this->event_info !== null) {
            $writer->writeVarint($stream, 66);
            $writer->writeVarint($stream, $this->event_info->serializedSize($sizeContext));
            $this->event_info->writeTo($context);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \POGOProtos\Data\Gym\GymState();

                $this->gym_state = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->name = $reader->readString($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                if ($this->urls === null) {
                    $this->urls = new \Protobuf\ScalarCollection();
                }

                $this->urls->add($reader->readString($stream));

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                $this->result = \POGOProtos\Networking\Responses\GetGymDetailsResponse\Result::valueOf($reader->readVarint($stream));

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->description = $reader->readString($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                if ($this->secondary_url === null) {
                    $this->secondary_url = new \Protobuf\ScalarCollection();
                }

                $this->secondary_url->add($reader->readString($stream));

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->checkin_image_url = $reader->readString($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \POGOProtos\Data\Raid\EventInfo();

                $this->event_info = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->gym_state !== null) {
            $innerSize = $this->gym_state->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->name !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->name);
        }

        if ($this->urls !== null) {
            foreach ($this->urls as $val) {
                $size += 1;
                $size += $calculator->computeStringSize($val);
            }
        }

        if ($this->result !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->result->value());
        }

        if ($this->description !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->description);
        }

        if ($this->secondary_url !== null) {
            foreach ($this->secondary_url as $val) {
                $size += 1;
                $size += $calculator->computeStringSize($val);
            }
        }

        if ($this->checkin_image_url !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->checkin_image_url);
        }

        if ($this->event_info !== null) {
            $innerSize = $this->event_info->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->gym_state = null;
        $this->name = null;
        $this->urls = null;
        $this->result = null;
        $this->description = null;
        $this->secondary_url = null;
        $this->checkin_image_url = null;
        $this->event_info = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \POGOProtos\Networking\Responses\GetGymDetailsResponse) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->gym_state = ($message->gym_state !== null) ? $message->gym_state : $this->gym_state;
        $this->name = ($message->name !== null) ? $message->name : $this->name;
        $this->urls = ($message->urls !== null) ? $message->urls : $this->urls;
        $this->result = ($message->result !== null) ? $message->result : $this->result;
        $this->description = ($message->description !== null) ? $message->description : $this->description;
        $this->secondary_url = ($message->secondary_url !== null) ? $message->secondary_url : $this->secondary_url;
        $this->checkin_image_url = ($message->checkin_image_url !== null) ? $message->checkin_image_url : $this->checkin_image_url;
        $this->event_info = ($message->event_info !== null) ? $message->event_info : $this->event_info;
    }


}

