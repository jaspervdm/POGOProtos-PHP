<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : POGOProtos/Data/RedeemPasscodeReward.proto
 */


namespace POGOProtos\Data;

/**
 * Protobuf message : POGOProtos.Data.RedeemPasscodeReward
 */
class RedeemPasscodeReward extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * items repeated message = 1
     *
     * @var \Protobuf\Collection<\POGOProtos\Data\Redeem\RedeemedItem>
     */
    protected $items = null;

    /**
     * avatar_items repeated message = 2
     *
     * @var \Protobuf\Collection<\POGOProtos\Data\Redeem\RedeemedAvatarItem>
     */
    protected $avatar_items = null;

    /**
     * egg_pokemon repeated message = 3
     *
     * @var \Protobuf\Collection<\POGOProtos\Data\PokemonData>
     */
    protected $egg_pokemon = null;

    /**
     * pokemon repeated message = 4
     *
     * @var \Protobuf\Collection<\POGOProtos\Data\PokemonData>
     */
    protected $pokemon = null;

    /**
     * poke_candy repeated message = 5
     *
     * @var \Protobuf\Collection<\POGOProtos\Data\Redeem\PokeCandy>
     */
    protected $poke_candy = null;

    /**
     * stardust optional int32 = 6
     *
     * @var int
     */
    protected $stardust = null;

    /**
     * pokecoins optional int32 = 7
     *
     * @var int
     */
    protected $pokecoins = null;

    /**
     * badges repeated enum = 8
     *
     * @var \Protobuf\Collection<\POGOProtos\Enums\GymBadgeType>
     */
    protected $badges = null;

    /**
     * Check if 'items' has a value
     *
     * @return bool
     */
    public function hasItemsList()
    {
        return $this->items !== null;
    }

    /**
     * Get 'items' value
     *
     * @return \Protobuf\Collection<\POGOProtos\Data\Redeem\RedeemedItem>
     */
    public function getItemsList()
    {
        return $this->items;
    }

    /**
     * Set 'items' value
     *
     * @param \Protobuf\Collection<\POGOProtos\Data\Redeem\RedeemedItem> $value
     */
    public function setItemsList(\Protobuf\Collection $value = null)
    {
        $this->items = $value;
    }

    /**
     * Add a new element to 'items'
     *
     * @param \POGOProtos\Data\Redeem\RedeemedItem $value
     */
    public function addItems(\POGOProtos\Data\Redeem\RedeemedItem $value)
    {
        if ($this->items === null) {
            $this->items = new \Protobuf\MessageCollection();
        }

        $this->items->add($value);
    }

    /**
     * Check if 'avatar_items' has a value
     *
     * @return bool
     */
    public function hasAvatarItemsList()
    {
        return $this->avatar_items !== null;
    }

    /**
     * Get 'avatar_items' value
     *
     * @return \Protobuf\Collection<\POGOProtos\Data\Redeem\RedeemedAvatarItem>
     */
    public function getAvatarItemsList()
    {
        return $this->avatar_items;
    }

    /**
     * Set 'avatar_items' value
     *
     * @param \Protobuf\Collection<\POGOProtos\Data\Redeem\RedeemedAvatarItem> $value
     */
    public function setAvatarItemsList(\Protobuf\Collection $value = null)
    {
        $this->avatar_items = $value;
    }

    /**
     * Add a new element to 'avatar_items'
     *
     * @param \POGOProtos\Data\Redeem\RedeemedAvatarItem $value
     */
    public function addAvatarItems(\POGOProtos\Data\Redeem\RedeemedAvatarItem $value)
    {
        if ($this->avatar_items === null) {
            $this->avatar_items = new \Protobuf\MessageCollection();
        }

        $this->avatar_items->add($value);
    }

    /**
     * Check if 'egg_pokemon' has a value
     *
     * @return bool
     */
    public function hasEggPokemonList()
    {
        return $this->egg_pokemon !== null;
    }

    /**
     * Get 'egg_pokemon' value
     *
     * @return \Protobuf\Collection<\POGOProtos\Data\PokemonData>
     */
    public function getEggPokemonList()
    {
        return $this->egg_pokemon;
    }

    /**
     * Set 'egg_pokemon' value
     *
     * @param \Protobuf\Collection<\POGOProtos\Data\PokemonData> $value
     */
    public function setEggPokemonList(\Protobuf\Collection $value = null)
    {
        $this->egg_pokemon = $value;
    }

    /**
     * Add a new element to 'egg_pokemon'
     *
     * @param \POGOProtos\Data\PokemonData $value
     */
    public function addEggPokemon(\POGOProtos\Data\PokemonData $value)
    {
        if ($this->egg_pokemon === null) {
            $this->egg_pokemon = new \Protobuf\MessageCollection();
        }

        $this->egg_pokemon->add($value);
    }

    /**
     * Check if 'pokemon' has a value
     *
     * @return bool
     */
    public function hasPokemonList()
    {
        return $this->pokemon !== null;
    }

    /**
     * Get 'pokemon' value
     *
     * @return \Protobuf\Collection<\POGOProtos\Data\PokemonData>
     */
    public function getPokemonList()
    {
        return $this->pokemon;
    }

    /**
     * Set 'pokemon' value
     *
     * @param \Protobuf\Collection<\POGOProtos\Data\PokemonData> $value
     */
    public function setPokemonList(\Protobuf\Collection $value = null)
    {
        $this->pokemon = $value;
    }

    /**
     * Add a new element to 'pokemon'
     *
     * @param \POGOProtos\Data\PokemonData $value
     */
    public function addPokemon(\POGOProtos\Data\PokemonData $value)
    {
        if ($this->pokemon === null) {
            $this->pokemon = new \Protobuf\MessageCollection();
        }

        $this->pokemon->add($value);
    }

    /**
     * Check if 'poke_candy' has a value
     *
     * @return bool
     */
    public function hasPokeCandyList()
    {
        return $this->poke_candy !== null;
    }

    /**
     * Get 'poke_candy' value
     *
     * @return \Protobuf\Collection<\POGOProtos\Data\Redeem\PokeCandy>
     */
    public function getPokeCandyList()
    {
        return $this->poke_candy;
    }

    /**
     * Set 'poke_candy' value
     *
     * @param \Protobuf\Collection<\POGOProtos\Data\Redeem\PokeCandy> $value
     */
    public function setPokeCandyList(\Protobuf\Collection $value = null)
    {
        $this->poke_candy = $value;
    }

    /**
     * Add a new element to 'poke_candy'
     *
     * @param \POGOProtos\Data\Redeem\PokeCandy $value
     */
    public function addPokeCandy(\POGOProtos\Data\Redeem\PokeCandy $value)
    {
        if ($this->poke_candy === null) {
            $this->poke_candy = new \Protobuf\MessageCollection();
        }

        $this->poke_candy->add($value);
    }

    /**
     * Check if 'stardust' has a value
     *
     * @return bool
     */
    public function hasStardust()
    {
        return $this->stardust !== null;
    }

    /**
     * Get 'stardust' value
     *
     * @return int
     */
    public function getStardust()
    {
        return $this->stardust;
    }

    /**
     * Set 'stardust' value
     *
     * @param int $value
     */
    public function setStardust($value = null)
    {
        $this->stardust = $value;
    }

    /**
     * Check if 'pokecoins' has a value
     *
     * @return bool
     */
    public function hasPokecoins()
    {
        return $this->pokecoins !== null;
    }

    /**
     * Get 'pokecoins' value
     *
     * @return int
     */
    public function getPokecoins()
    {
        return $this->pokecoins;
    }

    /**
     * Set 'pokecoins' value
     *
     * @param int $value
     */
    public function setPokecoins($value = null)
    {
        $this->pokecoins = $value;
    }

    /**
     * Check if 'badges' has a value
     *
     * @return bool
     */
    public function hasBadgesList()
    {
        return $this->badges !== null;
    }

    /**
     * Get 'badges' value
     *
     * @return \Protobuf\Collection<\POGOProtos\Enums\GymBadgeType>
     */
    public function getBadgesList()
    {
        return $this->badges;
    }

    /**
     * Set 'badges' value
     *
     * @param \Protobuf\Collection<\POGOProtos\Enums\GymBadgeType> $value
     */
    public function setBadgesList(\Protobuf\Collection $value = null)
    {
        $this->badges = $value;
    }

    /**
     * Add a new element to 'badges'
     *
     * @param \POGOProtos\Enums\GymBadgeType $value
     */
    public function addBadges(\POGOProtos\Enums\GymBadgeType $value)
    {
        if ($this->badges === null) {
            $this->badges = new \Protobuf\EnumCollection();
        }

        $this->badges->add($value);
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'items' => [],
            'avatar_items' => [],
            'egg_pokemon' => [],
            'pokemon' => [],
            'poke_candy' => [],
            'stardust' => null,
            'pokecoins' => null,
            'badges' => []
        ], $values);

        $message->setStardust($values['stardust']);
        $message->setPokecoins($values['pokecoins']);

        foreach ($values['items'] as $item) {
            $message->addItems($item);
        }

        foreach ($values['avatar_items'] as $item) {
            $message->addAvatarItems($item);
        }

        foreach ($values['egg_pokemon'] as $item) {
            $message->addEggPokemon($item);
        }

        foreach ($values['pokemon'] as $item) {
            $message->addPokemon($item);
        }

        foreach ($values['poke_candy'] as $item) {
            $message->addPokeCandy($item);
        }

        foreach ($values['badges'] as $item) {
            $message->addBadges($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'RedeemPasscodeReward',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'items',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.POGOProtos.Data.Redeem.RedeemedItem'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'avatar_items',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.POGOProtos.Data.Redeem.RedeemedAvatarItem'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'egg_pokemon',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.POGOProtos.Data.PokemonData'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'pokemon',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.POGOProtos.Data.PokemonData'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'poke_candy',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.POGOProtos.Data.Redeem.PokeCandy'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'stardust',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'pokecoins',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'badges',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.POGOProtos.Enums.GymBadgeType'
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->items !== null) {
            foreach ($this->items as $val) {
                $writer->writeVarint($stream, 10);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->avatar_items !== null) {
            foreach ($this->avatar_items as $val) {
                $writer->writeVarint($stream, 18);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->egg_pokemon !== null) {
            foreach ($this->egg_pokemon as $val) {
                $writer->writeVarint($stream, 26);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->pokemon !== null) {
            foreach ($this->pokemon as $val) {
                $writer->writeVarint($stream, 34);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->poke_candy !== null) {
            foreach ($this->poke_candy as $val) {
                $writer->writeVarint($stream, 42);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->stardust !== null) {
            $writer->writeVarint($stream, 48);
            $writer->writeVarint($stream, $this->stardust);
        }

        if ($this->pokecoins !== null) {
            $writer->writeVarint($stream, 56);
            $writer->writeVarint($stream, $this->pokecoins);
        }

        if ($this->badges !== null) {
            foreach ($this->badges as $val) {
                $writer->writeVarint($stream, 64);
                $writer->writeVarint($stream, $val->value());
            }
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \POGOProtos\Data\Redeem\RedeemedItem();

                if ($this->items === null) {
                    $this->items = new \Protobuf\MessageCollection();
                }

                $this->items->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \POGOProtos\Data\Redeem\RedeemedAvatarItem();

                if ($this->avatar_items === null) {
                    $this->avatar_items = new \Protobuf\MessageCollection();
                }

                $this->avatar_items->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \POGOProtos\Data\PokemonData();

                if ($this->egg_pokemon === null) {
                    $this->egg_pokemon = new \Protobuf\MessageCollection();
                }

                $this->egg_pokemon->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \POGOProtos\Data\PokemonData();

                if ($this->pokemon === null) {
                    $this->pokemon = new \Protobuf\MessageCollection();
                }

                $this->pokemon->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \POGOProtos\Data\Redeem\PokeCandy();

                if ($this->poke_candy === null) {
                    $this->poke_candy = new \Protobuf\MessageCollection();
                }

                $this->poke_candy->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->stardust = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->pokecoins = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 8) {
                $innerSize  = $reader->readVarint($stream);
                $innerLimit = $stream->tell() + $innerSize;

                if ($this->badges === null) {
                    $this->badges = new \Protobuf\EnumCollection();
                }

                while ($stream->tell() < $innerLimit) {
                    $this->badges->add(\POGOProtos\Enums\GymBadgeType::valueOf($reader->readVarint($stream)));
                }

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->items !== null) {
            foreach ($this->items as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->avatar_items !== null) {
            foreach ($this->avatar_items as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->egg_pokemon !== null) {
            foreach ($this->egg_pokemon as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->pokemon !== null) {
            foreach ($this->pokemon as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->poke_candy !== null) {
            foreach ($this->poke_candy as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->stardust !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->stardust);
        }

        if ($this->pokecoins !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->pokecoins);
        }

        if ($this->badges !== null) {
            foreach ($this->badges as $val) {
                $size += 1;
                $size += $calculator->computeVarintSize($val->value());
            }
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->items = null;
        $this->avatar_items = null;
        $this->egg_pokemon = null;
        $this->pokemon = null;
        $this->poke_candy = null;
        $this->stardust = null;
        $this->pokecoins = null;
        $this->badges = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \POGOProtos\Data\RedeemPasscodeReward) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->items = ($message->items !== null) ? $message->items : $this->items;
        $this->avatar_items = ($message->avatar_items !== null) ? $message->avatar_items : $this->avatar_items;
        $this->egg_pokemon = ($message->egg_pokemon !== null) ? $message->egg_pokemon : $this->egg_pokemon;
        $this->pokemon = ($message->pokemon !== null) ? $message->pokemon : $this->pokemon;
        $this->poke_candy = ($message->poke_candy !== null) ? $message->poke_candy : $this->poke_candy;
        $this->stardust = ($message->stardust !== null) ? $message->stardust : $this->stardust;
        $this->pokecoins = ($message->pokecoins !== null) ? $message->pokecoins : $this->pokecoins;
        $this->badges = ($message->badges !== null) ? $message->badges : $this->badges;
    }


}

