<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor :
 * POGOProtos/Networking/Responses/PlatformClientActionsResponse.proto
 */


namespace POGOProtos\Networking\Responses;

/**
 * Protobuf message :
 * POGOProtos.Networking.Responses.UpdateNotificationStatusResponse
 */
class UpdateNotificationStatusResponse extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * notification_ids repeated string = 1
     *
     * @var \Protobuf\Collection
     */
    protected $notification_ids = null;

    /**
     * create_timestamp_ms repeated int64 = 2
     *
     * @var \Protobuf\Collection
     */
    protected $create_timestamp_ms = null;

    /**
     * state optional enum = 3
     *
     * @var \POGOProtos\Networking\Responses\UpdateNotificationStatusResponse\NotificationState
     */
    protected $state = null;

    /**
     * Check if 'notification_ids' has a value
     *
     * @return bool
     */
    public function hasNotificationIdsList()
    {
        return $this->notification_ids !== null;
    }

    /**
     * Get 'notification_ids' value
     *
     * @return \Protobuf\Collection
     */
    public function getNotificationIdsList()
    {
        return $this->notification_ids;
    }

    /**
     * Set 'notification_ids' value
     *
     * @param \Protobuf\Collection $value
     */
    public function setNotificationIdsList(\Protobuf\Collection $value = null)
    {
        $this->notification_ids = $value;
    }

    /**
     * Add a new element to 'notification_ids'
     *
     * @param string $value
     */
    public function addNotificationIds($value)
    {
        if ($this->notification_ids === null) {
            $this->notification_ids = new \Protobuf\ScalarCollection();
        }

        $this->notification_ids->add($value);
    }

    /**
     * Check if 'create_timestamp_ms' has a value
     *
     * @return bool
     */
    public function hasCreateTimestampMsList()
    {
        return $this->create_timestamp_ms !== null;
    }

    /**
     * Get 'create_timestamp_ms' value
     *
     * @return \Protobuf\Collection
     */
    public function getCreateTimestampMsList()
    {
        return $this->create_timestamp_ms;
    }

    /**
     * Set 'create_timestamp_ms' value
     *
     * @param \Protobuf\Collection $value
     */
    public function setCreateTimestampMsList(\Protobuf\Collection $value = null)
    {
        $this->create_timestamp_ms = $value;
    }

    /**
     * Add a new element to 'create_timestamp_ms'
     *
     * @param int $value
     */
    public function addCreateTimestampMs($value)
    {
        if ($this->create_timestamp_ms === null) {
            $this->create_timestamp_ms = new \Protobuf\ScalarCollection();
        }

        $this->create_timestamp_ms->add($value);
    }

    /**
     * Check if 'state' has a value
     *
     * @return bool
     */
    public function hasState()
    {
        return $this->state !== null;
    }

    /**
     * Get 'state' value
     *
     * @return \POGOProtos\Networking\Responses\UpdateNotificationStatusResponse\NotificationState
     */
    public function getState()
    {
        return $this->state;
    }

    /**
     * Set 'state' value
     *
     * @param \POGOProtos\Networking\Responses\UpdateNotificationStatusResponse\NotificationState $value
     */
    public function setState(\POGOProtos\Networking\Responses\UpdateNotificationStatusResponse\NotificationState $value = null)
    {
        $this->state = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'notification_ids' => [],
            'create_timestamp_ms' => [],
            'state' => null
        ], $values);

        $message->setState($values['state']);

        foreach ($values['notification_ids'] as $item) {
            $message->addNotificationIds($item);
        }

        foreach ($values['create_timestamp_ms'] as $item) {
            $message->addCreateTimestampMs($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'UpdateNotificationStatusResponse',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'notification_ids',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'create_timestamp_ms',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'state',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.POGOProtos.Networking.Responses.UpdateNotificationStatusResponse.NotificationState'
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->notification_ids !== null) {
            foreach ($this->notification_ids as $val) {
                $writer->writeVarint($stream, 10);
                $writer->writeString($stream, $val);
            }
        }

        if ($this->create_timestamp_ms !== null) {
            foreach ($this->create_timestamp_ms as $val) {
                $writer->writeVarint($stream, 16);
                $writer->writeVarint($stream, $val);
            }
        }

        if ($this->state !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeVarint($stream, $this->state->value());
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                if ($this->notification_ids === null) {
                    $this->notification_ids = new \Protobuf\ScalarCollection();
                }

                $this->notification_ids->add($reader->readString($stream));

                continue;
            }

            if ($tag === 2) {
                $innerSize  = $reader->readVarint($stream);
                $innerLimit = $stream->tell() + $innerSize;

                if ($this->create_timestamp_ms === null) {
                    $this->create_timestamp_ms = new \Protobuf\ScalarCollection();
                }

                while ($stream->tell() < $innerLimit) {
                    $this->create_timestamp_ms->add($reader->readVarint($stream));
                }

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                $this->state = \POGOProtos\Networking\Responses\UpdateNotificationStatusResponse\NotificationState::valueOf($reader->readVarint($stream));

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->notification_ids !== null) {
            foreach ($this->notification_ids as $val) {
                $size += 1;
                $size += $calculator->computeStringSize($val);
            }
        }

        if ($this->create_timestamp_ms !== null) {
            foreach ($this->create_timestamp_ms as $val) {
                $size += 1;
                $size += $calculator->computeVarintSize($val);
            }
        }

        if ($this->state !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->state->value());
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->notification_ids = null;
        $this->create_timestamp_ms = null;
        $this->state = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \POGOProtos\Networking\Responses\UpdateNotificationStatusResponse) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->notification_ids = ($message->notification_ids !== null) ? $message->notification_ids : $this->notification_ids;
        $this->create_timestamp_ms = ($message->create_timestamp_ms !== null) ? $message->create_timestamp_ms : $this->create_timestamp_ms;
        $this->state = ($message->state !== null) ? $message->state : $this->state;
    }


}

